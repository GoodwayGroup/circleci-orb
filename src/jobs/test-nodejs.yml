description: Install dependencies and run test command

parameters:
  executor-name:
    type: enum
    default: "build-images"
    enum: ["build-images", "dockerhub-authed", "ecr-authed", "node-default"]
  executor-tag:
    type: string
    default: node-12
  executor-resource-class:
    default: large
    description: Configure the executor resource class
    enum:
      - small
      - medium
      - medium+
      - large
      - xlarge
      - 2xlarge
      - 2xlarge+
    type: enum
  cache-key:
    type: string
    default: v0-dependencies
  coveralls-upload:
    type: boolean
    default: true
  test-steps:
    type: steps
    default:
      - run: npm test
  package-lock-filename:
    type: string
    default: package-lock.json
    description: |
      The package lock file to use for caching dependencies; npm should use package-lock.json, pnpm should use pnpm-lock.yaml, etc.
  lint:
    default: true
    description: |
      Lint codebase before test
    type: boolean
  lint-steps:
    type: steps
    default:
      - run: npm run lint
    description: |
      Steps to run to lint a codebase
  store-coverage-artifacts:
    type: boolean
    default: true
    description: |
      If enabled, stores the ./coverage directory as a build artifact
  tar-coverage-artifacts:
    type: boolean
    default: true
    description: |
      If enabled, tars the ./coverage directory into coverage.tar for storage.
  use-remote-docker:
    type: boolean
    default: false
    description: |
      If enabled, uses the remote docker executor instead of the machine executor.

executor:
  name: << parameters.executor-name >>
  tag: << parameters.executor-tag >>
  resource_class: << parameters.executor-resource-class >>

steps:
  - test-nodejs:
      cache-key: << parameters.cache-key >>
      coveralls-upload: << parameters.coveralls-upload >>
      test-steps: << parameters.test-steps >>
      lint: << parameters.lint >>
      lint-steps: << parameters.lint-steps >>
      store-coverage-artifacts: << parameters.store-coverage-artifacts >>
      tar-coverage-artifacts: << parameters.tar-coverage-artifacts >>
      use-remote-docker: << parameters.use-remote-docker >>
      package-lock-filename: << parameters.package-lock-filename >>
