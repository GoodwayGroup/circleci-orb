description: Install dependencies and run test command

parameters:
  cache-key:
    type: string
    default: v0-dependencies
  coveralls-upload:
    type: boolean
    default: true
  test-steps:
    type: steps
    default:
      - run: npm test
  lint:
    default: true
    description: |
      Lint codebase before test
    type: boolean
  lint-steps:
    type: steps
    default:
      - run: npm run lint
    description: |
      Steps to run to lint a codebase
  store-coverage-artifacts:
    type: boolean
    default: true
    description: |
      If enabled, stores the ./coverage directory as a build artifact
  tar-coverage-artifacts:
    type: boolean
    default: true
    description: |
      If enabled, tars the ./coverage directory into coverage.tar for storage.
  use-remote-docker:
    type: boolean
    default: false
    description: |
      If enabled, uses the remote docker executor instead of the machine executor.

steps:
  - checkout

  - when:
      condition: <<parameters.use-remote-docker>>
      steps:
        - setup_remote_docker

  # Download and cache dependencies
  - restore_cache:
      keys:
        - << parameters.cache-key >>-{{ checksum "package-lock.json" }}

  - npm-install-or-ci

  - save_cache:
      paths:
        - node_modules
      key: << parameters.cache-key >>-{{ checksum "package-lock.json" }}

  - when:
      condition: <<parameters.lint>>
      steps: <<parameters.lint-steps>>

  - steps: << parameters.test-steps >>

  - when:
      condition: << parameters.coveralls-upload >>
      steps:
        - coveralls/upload

  - when:
      condition: << parameters.store-coverage-artifacts >>
      steps:
        - when:
            condition:
              not: << parameters.tar-coverage-artifacts >>
            steps:
              - store_artifacts:
                  path: ./coverage
        - when:
            condition: << parameters.tar-coverage-artifacts >>
            steps:
              - run:
                  name: Compress Coverage Artifacts
                  command: tar -cvzf coverage.tar ./coverage
              - store_artifacts:
                  path: coverage.tar
